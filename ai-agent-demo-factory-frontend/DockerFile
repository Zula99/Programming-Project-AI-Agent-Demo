# Use a Node.js official image as the base for building and serving the React app
FROM node:20-alpine

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json 
# Copying these separately allows Docker to cache the npm install step.
# If only source code changes, npm install won't need to rerun.
COPY ./ai-agent-demo-factory-frontend/package*.json ./

# Install project dependencies
# 'npm ci' is preferred in Docker builds for clean, reproducible installations from package-lock.json
# If you don't have package-lock.json, use 'npm install'
RUN npm ci

# Copy the rest of your frontend application files
COPY ./ai-agent-demo-factory-frontend /app

# Build the React application for production (optional, but good for understanding)
# For development, 'npm start' is usually used, which is what we'll use in docker-compose.
# RUN npm run build

# Expose the port your React development server typically runs on
EXPOSE 3000

# Command to start the React development server
CMD ["npm", "dev start"]
